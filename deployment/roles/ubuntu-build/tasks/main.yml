---
# a role that sets up an environment for working and debugging on an ubuntu host
- name: set hostname
  hostname:
    name: "{{ploy_hostname}}"
  tags: hostname

- name: Make sure the hostname is available for local commands (i.e. sudo)
  lineinfile:
    dest: /etc/hosts
    state: present
    regexp: '{{ploy_hostname}}$'
    line: '127.0.0.1  {{ploy_hostname}}.local {{ploy_hostname}}'
  tags: hostname

- name: install build dependencies
  apt:
    name: "{{item}}"
    state: installed
  become: true
  with_items:
    - avahi-daemon
    - git-core
    - bash-completion
    - build-essential
    - htop
    - libxml2-dev
    - libxslt1-dev
    - python
    - python3
    - python3-dev
    - python3-flake8
    - python3-pip
    - python3-venv
    - screen
    - vim

- name: create user
  become: true
  user:
    name: "{{builduser}}"
    createhome: yes
    shell: /bin/bash
    # set password to '*' to unlock ssh access
    password: $6$loHAn4IfYLEdMc$e0de/845DozoVAzG1rKx8eRqrBxRLnYJO746dqozpxYhxSgCfA7bI9p0KoDqNU8A0hot1zqJvMQNWM1IuJGnx1
    update_password: always
    groups: sudo
    append: yes

- name: Allow 'sudo' group to have passwordless sudo
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^%sudo'
    line: '%sudo ALL=(ALL) NOPASSWD: ALL'
    validate: visudo -cf %s

- name: enable ssh access
  become: true
  authorized_key:
    user: "{{builduser}}"
    key: "{{builduser_key}}"

- name: configure git
  become: true
  become_user: "{{builduser}}"
  copy:
    dest: "/home/{{builduser}}/.gitconfig"
    owner: "{{builduser}}"
    mode: "0700"
    content: |
      [user]
      name = {{builduser_fullname}}
      email = {{builduser_email}}

      [branch]
      autosetupmerge = true
      autosetuprebase = remote

      [push]
      default = current

      [core]
      quotepath = false
      pager = "less -RciqMSj5"

      [color]
      diff = auto
      branch = auto
      status = auto

      [alias]
      m = merge --no-ff
      st = status
      ai = add -i
      ap = add -p
      d = diff
      r = remote
      dc = diff --cached
      ci = commit -v
      cia = commit -v -a
      co = checkout
      cp = cherry-pick
      l = log
      ll = log -p
      lt = log trunk..
      llt = log -p trunk..
      lm = log master..
      llm = log -p master..
      b = branch
      sm = submodule
      reha = reset --hard
      feta = fetch --all
      lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
      lga = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative --branches --remotes
      lol = log --graph --decorate --pretty=oneline --abbrev-commit
      lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
      pure = pull --rebase

- name: configure shell
  become: true
  become_user: "{{item.name}}"
  copy:
    dest: "{{item.path}}/.bash_aliases"
    owner: "{{item.name}}"
    mode: "0700"
    content: |
      export EDITOR=vim
      alias ll="ls -la"
      set +o allexport
      unset MANPATH
      alias g="git"
      export LC_ALL=C.UTF-8
      export LANG=C.UTF-8

      # prompt
      function parse_git_branch {
        ref=$(git-symbolic-ref HEAD 2> /dev/null) || return
        echo "("${ref#refs/heads/}")" 
      }

      export GIT_PS1_SHOWDIRTYSTATE=1
      export GIT_PS1_SHOWBRANCHREMOTE=1
      export GIT_PS1_SHOWUPSTREAM='auto'
      PS1='# \[\e[0;33;33m\]\u@\H\[\033[0;32m\]`__git_ps1` \[\e[0;33;33m\]\w \n\[\e[0m\]# '
      # Make it also work for the 'g' alias of the git command
      complete -o bashdefault -o default -o nospace -F _git g 2>/dev/null \
        || complete -o default -o nospace -F _git g

  with_items:
    - name: "{{builduser}}"
      path: "/home/{{builduser}}"
    - name: root
      path: /root

- name: configure vim
  become: true
  become_user: "{{builduser}}"
  file:
    dest: "/home/{{builduser}}/.vim/bundle"
    owner: "{{builduser}}"
    mode: "0700"
    state: directory

- name: configure vim
  become: true
  become_user: "{{builduser}}"
  copy:
    src: vimrc
    dest: "/home/{{builduser}}/.vimrc"
    owner: "{{builduser}}"
    mode: "0700"

- name: install vundle from git
  become: true
  become_user: "{{builduser}}"
  git:
    repo: https://github.com/VundleVim/Vundle.vim.git
    dest: "/home/{{builduser}}/.vim/bundle/Vundle.vim"

- name: bootstrap vundle
  become: true
  become_user: "{{builduser}}"
  command: vim +PluginInstall +qall
  args:
    creates: "/home/{{builduser}}/.vim/bundle/nerdtree/LICENCE"
