---
# a role that sets up an environment for developing the hub on a ubuntu machine
# it requires that the roles `hub-backend` and `hub-ubuntu` have been applied already
- name: install development dependencies
  apt:
    name: "{{item}}"
    state: installed
  become: true
  with_items:
    - bash-completion
    - build-essential
    - htop
    - python3-dev
    - python3-flake8
    - python3-pip
    - python3-venv
    - screen

- name: create user
  become: true
  user:
    name: "{{build_user}}"
    createhome: yes
    shell: /bin/bash
    # set password to '*' to unlock ssh access
    password: $6$loHAn4IfYLEdMc$e0de/845DozoVAzG1rKx8eRqrBxRLnYJO746dqozpxYhxSgCfA7bI9p0KoDqNU8A0hot1zqJvMQNWM1IuJGnx1
    update_password: always
    groups: sudo
    append: yes

- name: configure shell
  become: true
  become_user: "{{item.name}}"
  copy:
    dest: "{{item.path}}/.bash_aliases"
    owner: "{{item.name}}"
    mode: "0700"
    content: |
      export EDITOR=vim
      alias ll="ls -la"
      set +o allexport
      unset MANPATH
      alias g="git"
      export LC_ALL=C.UTF-8
      export LANG=C.UTF-8

      # prompt
      function parse_git_branch {
        ref=$(git-symbolic-ref HEAD 2> /dev/null) || return
        echo "("${ref#refs/heads/}")"
      }

      export GIT_PS1_SHOWDIRTYSTATE=1
      export GIT_PS1_SHOWBRANCHREMOTE=1
      export GIT_PS1_SHOWUPSTREAM='auto'
      PS1='# \[\e[0;33;33m\]\u@\H\[\033[0;32m\]`__git_ps1` \[\e[0;33;33m\]\w \n\[\e[0m\]# '
      # Make it also work for the 'g' alias of the git command
      complete -o bashdefault -o default -o nospace -F _git g 2>/dev/null \
        || complete -o default -o nospace -F _git g

  with_items:
    - name: "{{build_user}}"
      path: "/home/{{build_user}}"
    - name: root
      path: /root

- name: Allow 'sudo' group to have passwordless sudo
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^%sudo'
    line: '%sudo ALL=(ALL) NOPASSWD: ALL'
    validate: visudo -cf %s

- name: enable ssh access
  become: true
  authorized_key:
    user: "{{build_user}}"
    key: "{{build_user_key}}"
  when: build_user_key is defined

- name: install rsync
  apt:
    name: "{{item}}"
    state: installed
  become: true
  when: source_transport == 'rsync'
  with_items:
    - rsync

- name: create hub sources destination
  file:
    dest: "/home/{{build_user}}/nuimo-hub-backend/"
    state: directory
  become: true
  become_user: "{{build_user}}"
  tags: rsync
  when: source_transport == 'rsync'

- name: upload sources via rsync
  synchronize:
    src: ../../../../
    dest: "/home/{{build_user}}/nuimo-hub-backend/"
    archive: false
    delete: true
    rsync_opts:
    - "-rlptD"
    - "--exclude=.*"
    - "--exclude=*.egg-info"
    - "--exclude=__pycache__"
    - "--exclude=node_modules"
    - "--exclude=/build"
    - "--exclude=/deployment"
    - "--exclude=/dist"
    - "--exclude=/docs"
    - "--exclude=/venv"
    - "-e bin/ploy-ssh"

  become: true
  become_user: "{{build_user}}"
  tags: rsync
  when: source_transport == 'rsync'

- include: git.yml
  when: source_transport == 'git'
  tags: git

# at this state we now have a source directory on the host (via git checkout or rsync)

- name: make sure the deployment version of the hub is not running
  supervisorctl:
    name: senic_hub
    state: stopped
  tags: spv

- name: install source version into deployment venv
  pip:
    name: "-e /home/{{build_user}}/nuimo-hub-backend/"
    virtualenv: "{{backend_deploy_location}}/venv"
    chdir: "{{backend_deploy_location}}"
  tags: spv

- name: make sure the development version of the hub is now running
  supervisorctl:
    name: senic_hub
    state: started
  tags: spv
